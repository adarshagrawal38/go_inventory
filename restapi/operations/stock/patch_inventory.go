// Code generated by go-swagger; DO NOT EDIT.

package stock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchInventoryHandlerFunc turns a function with the right signature into a patch inventory handler
type PatchInventoryHandlerFunc func(PatchInventoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchInventoryHandlerFunc) Handle(params PatchInventoryParams) middleware.Responder {
	return fn(params)
}

// PatchInventoryHandler interface for that can handle valid patch inventory params
type PatchInventoryHandler interface {
	Handle(PatchInventoryParams) middleware.Responder
}

// NewPatchInventory creates a new http.Handler for the patch inventory operation
func NewPatchInventory(ctx *middleware.Context, handler PatchInventoryHandler) *PatchInventory {
	return &PatchInventory{Context: ctx, Handler: handler}
}

/*PatchInventory swagger:route PATCH /inventory Stock patchInventory

update an item

*/
type PatchInventory struct {
	Context *middleware.Context
	Handler PatchInventoryHandler
}

func (o *PatchInventory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchInventoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
