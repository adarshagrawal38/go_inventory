// Code generated by go-swagger; DO NOT EDIT.

package stock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostInventoryParams creates a new PostInventoryParams object
//
// There are no default values defined in the spec.
func NewPostInventoryParams() PostInventoryParams {

	return PostInventoryParams{}
}

// PostInventoryParams contains all the bound params for the post inventory operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostInventory
type PostInventoryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	ItemName string
	/*
	  In: query
	*/
	Name *string
	/*
	  Required: true
	  In: query
	*/
	Price float64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostInventoryParams() beforehand.
func (o *PostInventoryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qItemName, qhkItemName, _ := qs.GetOK("itemName")
	if err := o.bindItemName(qItemName, qhkItemName, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrice, qhkPrice, _ := qs.GetOK("price")
	if err := o.bindPrice(qPrice, qhkPrice, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindItemName binds and validates parameter ItemName from query.
func (o *PostInventoryParams) bindItemName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("itemName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("itemName", "query", raw); err != nil {
		return err
	}
	o.ItemName = raw

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *PostInventoryParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindPrice binds and validates parameter Price from query.
func (o *PostInventoryParams) bindPrice(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("price", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("price", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("price", "query", "float64", raw)
	}
	o.Price = value

	return nil
}
