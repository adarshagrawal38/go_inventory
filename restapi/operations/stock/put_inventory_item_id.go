// Code generated by go-swagger; DO NOT EDIT.

package stock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutInventoryItemIDHandlerFunc turns a function with the right signature into a put inventory item ID handler
type PutInventoryItemIDHandlerFunc func(PutInventoryItemIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutInventoryItemIDHandlerFunc) Handle(params PutInventoryItemIDParams) middleware.Responder {
	return fn(params)
}

// PutInventoryItemIDHandler interface for that can handle valid put inventory item ID params
type PutInventoryItemIDHandler interface {
	Handle(PutInventoryItemIDParams) middleware.Responder
}

// NewPutInventoryItemID creates a new http.Handler for the put inventory item ID operation
func NewPutInventoryItemID(ctx *middleware.Context, handler PutInventoryItemIDHandler) *PutInventoryItemID {
	return &PutInventoryItemID{Context: ctx, Handler: handler}
}

/* PutInventoryItemID swagger:route PUT /inventory/{itemId} Stock putInventoryItemId

update an item by item id

*/
type PutInventoryItemID struct {
	Context *middleware.Context
	Handler PutInventoryItemIDHandler
}

func (o *PutInventoryItemID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutInventoryItemIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
