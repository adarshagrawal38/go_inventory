swagger: "2.0"
info:
  version: 1.0.0
  title: Inventory Management
  description: A mini project for practice
  contact:
    name: AAA
    url: http://aaa.com
tags:
  - name: "User"
    description: "Operations about user"
  - name: "Stock"
    description: "operations on stock items"
  - name: "Authorization"
    description: "check user credentials"
paths:
  /user:
    post:
      tags:
        - "User"
      summary: new user registration to inventory
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Users"
      responses:
        201:
          description: User created
          schema:
            $ref: "#/definitions/Users"
    put:
      tags:
        - "User"
      summary: user updated
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Users"
      responses:
        201:
          description: User Updated
          schema:
            $ref: "#/definitions/Users"

  /user/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - "User"
      responses:
        200:
          description: get user details
          schema:
            $ref: "#/definitions/Users"
    delete:
      tags:
        - "User"
      responses:
        200:
          description: user deleted
        404:
          description: internal server error
  /login:
    post:
      tags:
        - "Authorization"
      summary: login user
      parameters:
        - name: email
          in: query
          type: string
          required: true
        - name: password
          in: query
          type: string
          required: true
      responses:
        200:
          description: login sucessful
        401:
          description: invalid credentials
  /inventory:
    get:
      tags:
        - "Stock"
      summary: fetches all inventory data
      responses:
        200:
          description: Fetched all records
          schema:
            $ref: "#/definitions/Items"
    post:
      summary: saves an item to inventory
      tags:
        - "Stock"
      parameters:
        - name: itemName
          in: query
          type: string
          required: true
        - name: name
          in: query
          type: string
          required: false
        - name: price
          in: query
          type: number
          required: true
      responses:
        201:
          description: Item saved successfully
          schema:
            $ref: "#/definitions/Item"
  /inventory/{itemId}:
    parameters:
      - type: integer
        format: int64
        name: itemId
        in: path
        required: true
    put:
      tags:
        - "Stock"
      summary: update an item by item id
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: Successfully updated the record
          schema:
            $ref: "#/definitions/Item"
    delete:
      tags:
        - "Stock"
      responses:
        200:
          description: Item deleted
        404:
          description: Item not found
  /inventory/search/{itemName}:
    parameters:
      - type: string
        name: itemName
        in: path
        required: true
    get:
      tags:
        - "Stock"
      summary: get item by name
      responses:
        200:
          description: Item fetched
          schema:
            $ref: "#/definitions/Items"

definitions:
  Item:
    type: object
    properties:
      id:
        type: integer
        example: 1
      itemName:
        type: string
        example: Coffee
      description:
        type: string
        example: Bru
      sellingPrice:
        type: number
        example: 125.5
      MRP:
        type: number
        example: 130
      quantity:
        type: integer
        example: 6
  Items:
    type: array
    items:
      $ref: "#/definitions/Item"
  Users:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Ram
      email:
        type: string
        example: rk@gmail.com
      password:
        type: string
        format: password
